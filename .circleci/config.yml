version: 2.1

defaults: &defaults
  docker:
    - image: circleci/node:10.17.0

commands:
  # NPM caching commands based on: https://circleci.com/docs/2.0/caching/#restoring-cache
  restore_npm_cache:
    description: 'Restores cached Node modules'
    steps:
      - restore_cache:
          keys:
            # From CircleCI docs:
            #   "Caches are immutable so it is useful to start all your cache keys with a version prefix,
            #    for example v1-.... This enables you to regenerate all of your caches by incrementing
            #    the version in this prefix."
            - v2-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v2-deps-{{ .Branch }}-
            - v2-deps-

  save_npm_cache:
    description: 'Saves Node modules for later re-use'
    steps:
      - save_cache:
          key: v2-deps-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - ~/.cache/Cypress

  setup:
    description:
      'Checks out the relevant branch, checks for cached dependencies, installs them if something
      changed.'
    steps:
      - checkout
      - run:
          name: 'Configure /etc/hosts so that application tenant is defined for integration testing'
          command: sudo echo 127.0.0.1 localhost | sudo tee -a /etc/hosts
      - restore_npm_cache
      - run: npm ci
      - save_npm_cache

  cypress_dependencies:
    description: 'Installs some Cypress-specific dependencies that are not pre-installed on the image we are using.'
    steps:
      - run:
          name: 'Install Cypress Dependencies'
          command: sudo apt-get update && sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

  cypress_cleanup:
    parameters:
      theme:
        type: string
        description: '`og` or `hibana` Theme'
        default: og

    steps:
      - store_test_results:
          name: 'Upload test report'
          path: /home/circleci/project/cypress/results
      - store_artifacts:
          name: 'Upload videos'
          path: /home/circleci/project/cypress/videos
          destination: cypress-videos
      - store_artifacts:
          name: 'Upload screenshots'
          path: /home/circleci/project/cypress/screenshots
          destination: cypress-screenshots
      - run:
          name: 'Check for coverage report'
          command: |
            FILE=./cypress-coverage/coverage-final.json

            if [ -f "$FILE" ]; then
                echo "$FILE exists."
                exit 0
            else
                echo "$FILE does not exist."
                exit 1
            fi
      - run:
          name: 'Rename coverage report'
          command: mkdir -p coverage && mv cypress-coverage/coverage-final.json coverage/from-cypress-<< parameters.theme >>-${CIRCLE_NODE_INDEX}.json
      - run: ls -al && cd coverage && ls -al && cd ../
      - run: mkdir -p workspace && mv coverage workspace
      # Saves the coverage folder to a temporary workspace directory for use by later jobs
      - persist_to_workspace:
          root: workspace
          paths:
            - coverage


# These are what actually get run in a workflow
jobs:
  'Unit Testing':
    <<: *defaults
    parallelism: 4
    steps:
      - setup
      - run:
          command:
            npm run test-ci $(circleci tests glob "./src/**/*.test.js" "./scripts/**/*.test.js" |
            circleci tests split --split-by=timings)
      - store_test_results:
          path: test_results
      - run:
          name: 'Check for coverage report'
          command: |
            FILE=./jest-coverage/coverage-final.json

            if [ -f "$FILE" ]; then
                echo "$FILE exists."
                exit 0
            else
                echo "$FILE does not exist."
                exit 1
            fi
      - run:
          name: 'Make coverage directory and move Jest coverage report using the runner node index'
          command: mkdir -p coverage && mv jest-coverage/coverage-final.json coverage/from-jest-${CIRCLE_NODE_INDEX}.json
      - run:
          name: 'Move coverage report to temporary workspace directory'
          command: mkdir -p workspace && mv coverage workspace
      # Saves the coverage folder to a temporary workspace directory for use by later jobs
      - persist_to_workspace:
          root: workspace
          paths:
            - coverage

  'Build - OG Theme':
    <<: *defaults
    steps:
      - setup
      - run: npm run build-ci
      - run: mkdir -p workspace && mv build build-og && mv build-og workspace
      # Saves the build folder to a temporary workspace directory for use by later jobs
      - persist_to_workspace:
          root: workspace
          paths:
            - build-og

  'Build - Hibana':
    <<: *defaults
    steps:
      - setup
      - run: npm run build-ci-hibana
      - run: mkdir -p workspace && mv build build-hibana && mv build-hibana workspace
      # Saves the build folder to a temporary workspace directory for use by later jobs
      - persist_to_workspace:
          root: workspace
          paths:
            - build-hibana

  'Integration Testing - OG Theme':
    <<: *defaults
    parallelism: 5
    steps:
      - setup
      - cypress_dependencies
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run: mv build-og build
      - run:
          name: 'Run Cypress Integration Tests'
          command: |
            function join { local IFS="$1"; shift; echo "$*"; }
            SPECS=$(circleci tests glob "./cypress/tests/integration/**/*.spec.js" | circleci tests split --split-by=timings);spec="${SPECS[@]}"
            echo $SPECS
            FORMATTED_SPECS=$(join , ${SPECS[@]})
            echo $FORMATTED_SPECS
            npm run test-integration-ci -- --spec $FORMATTED_SPECS
      - cypress_cleanup:
          theme: og

  'Integration Testing - OG Theme - Targeted':
    <<: *defaults
    description: 'Runs integration tests for the OG theme, structured for individual test debugging'
    parameters:
      specs:
        type: string
        default: ''
    steps:
      - setup
      - cypress_dependencies
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run: mv build-og build
      - run:
          name: 'Run Cypress Integration Tests - Targeted'
          command: |
            SPECS=<< parameters.specs >>
            npm run test-integration-ci -- --spec $SPECS
      - cypress_cleanup:
          theme: og

  'Integration Testing - Hibana Theme':
    <<: *defaults
    parallelism: 5
    steps:
      - setup
      - cypress_dependencies
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run: mv build-hibana build
      - run:
          name: 'Run Cypress Integration Tests'
          command: |
            function join { local IFS="$1"; shift; echo "$*"; }
            SPECS=$(circleci tests glob "./cypress/tests/integration/**/*.spec.js" | circleci tests split --split-by=timings);spec="${SPECS[@]}"
            echo $SPECS
            FORMATTED_SPECS=$(join , ${SPECS[@]})
            echo $FORMATTED_SPECS
            npm run test-integration-ci-hibana -- --spec $FORMATTED_SPECS
      - cypress_cleanup:
          theme: hibana

  'Integration Testing - Hibana Theme - Targeted':
    <<: *defaults
    description: 'Runs integration tests for the Hibana theme, structured for individual test debugging'
    parameters:
      specs:
        type: string
        default: ''
    steps:
      - setup
      - cypress_dependencies
      # Restores the /build folder from the previous job
      - attach_workspace:
          at: ./
      - run: mv build-hibana build
      - run:
          name: 'Run Cypress Integration Tests - Targeted'
          command: |
            SPECS=<< parameters.specs >>
            npm run test-integration-ci-hibana -- --spec $SPECS
      - cypress_cleanup:
          theme: hibana

  'Code coverage':
    <<: *defaults
    steps:
      - checkout
      # Restores the /coverage folder from the previous job
      - attach_workspace:
          at: ./
      - run: cd coverage && ls -al && cd ../
      - run:
          name: 'Merge code coverage reports from multiple sources'
          command: npx nyc merge coverage coverage/coverage.json
      - run: cd coverage && ls -al && cd ../ && ls -al
      - run:
          name: 'Upload code coverage report'
          command: bash <(curl -s https://codecov.io/bash) -f coverage/coverage.json -Z || echo 'Codecov upload failed'
          when: on_success

workflows:
  version: 2
  test-and-build:
    jobs:
      - 'Unit Testing'
      - 'Build - OG Theme'
      - 'Build - Hibana'
      - 'Integration Testing - OG Theme':
          requires:
            - 'Build - OG Theme'
      - 'Integration Testing - Hibana Theme':
          requires:
            - 'Build - Hibana'
      - 'Code coverage':
          requires:
            - 'Unit Testing'
            - 'Integration Testing - OG Theme'
            - 'Integration Testing - Hibana Theme'
      # Uncomment these jobs to run targeted integration tests by passing in
      # the targeted filename to run an individual spec or groups of specs.
      # See: https://docs.cypress.io/guides/guides/command-line.html#cypress-run for formatting tips.
      #
      # - 'Integration Testing - OG Theme - Targeted':
      #     specs: "./cypress/tests/integration/<your-glob-pattern-goes-here>.spec.js"
      #     requires:
      #       - 'Build - OG Theme'
      # - 'Integration Testing - Hibana Theme - Targeted':
      #     specs: "./cypress/tests/integration/<your-glob-pattern-goes-here>.spec.js"
      #     requires:
      #       - 'Build - Hibana'
